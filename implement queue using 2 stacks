// implement queue using two stacks

#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5

typedef struct {
    int top;
    int data[MAX_SIZE];
} Stack;

typedef struct {
    Stack s1; // Stack for enqueue operations
    Stack s2; // Stack for dequeue operations
} Queue;

void initializeStack(Stack *s) {
    s->top = -1;
}

void push(Stack *s, int item) {
    if (s->top == MAX_SIZE - 1) {
        printf("Stack overflow\n");
        return;
    }
    s->top++;
    s->data[s->top] = item;
}

int pop(Stack *s) {
    if (s->top == -1) {
        printf("Stack underflow\n");
        return -1; // Return a sentinel value indicating an error
    }
    int item = s->data[s->top];
    s->top--;
    return item;
}

void enqueue(Queue *q, int item) {
    if (q->s1.top == MAX_SIZE - 1) {
        printf("Queue overflow\n");
        return;
    }

    while (q->s2.top != -1) {
        int temp = pop(&q->s2);
        push(&q->s1, temp);
    }

    push(&q->s1, item);
}

int dequeue(Queue *q) {
    if (q->s1.top == -1 && q->s2.top == -1) {
        printf("Queue is empty\n");
        return -1; // Return a sentinel value indicating an error
    }

    if (q->s2.top == -1) {
        while (q->s1.top != -1) {
            int temp = pop(&q->s1);
            push(&q->s2, temp);
        }
    }

    return pop(&q->s2);
}

void printQueue(Queue *q) {
    if (q->s1.top == -1 && q->s2.top == -1) {
        printf("Queue is empty\n");
        return;
    }

    int i;

    // Print elements in s2 (in reverse order)
    for (i = q->s2.top; i >= 0; i--) {
        printf("%d ", q->s2.data[i]);
    }

    // Print elements in s1
    for (i = 0; i <= q->s1.top; i++) {
        printf("%d ", q->s1.data[i]);
    }

    printf("\n");
}


int main() {
    Queue q;
    initializeStack(&q.s1);
    initializeStack(&q.s2);

    int ch, item;

    while (1) {
        printf("1. Enqueue 2. Dequeue 3. Print Queue 4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1:
                printf("Enter the item to enqueue: ");
                scanf("%d", &item);
                enqueue(&q, item);
                break;
            case 2:
                item = dequeue(&q);
                if (item != -1) {
                    printf("Dequeued item: %d\n", item);
                }
                break;
            case 3:
                printQueue(&q);
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}

OUTPUT:
1. Enqueue 2. Dequeue 3. Print Queue 4. Exit
Enter your choice: 1
Enter the item to enqueue: 1
1. Enqueue 2. Dequeue 3. Print Queue 4. Exit
Enter your choice: 2
Dequeued item: 1
1. Enqueue 2. Dequeue 3. Print Queue 4. Exit
Enter your choice: 3
Queue is empty
1. Enqueue 2. Dequeue 3. Print Queue 4. Exit
Enter your choice: 
